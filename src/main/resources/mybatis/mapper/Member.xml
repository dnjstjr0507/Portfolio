<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">
	
	<!-- 회원가입 -->
	<insert id="insert" parameterType="MemberVO">
		insert into t1_member
			(mb_idx,mb_id,mb_email,mb_password,mb_name,mb_nickname,mb_nickupdate,mb_lev,
				mb_levupdate,mb_yy,mb_mm,mb_dd,mb_joindate,mb_intercept_date,mb_key)
		values
			(mb_idx_seq.nextval,#{mb_id},#{mb_email},#{mb_password},#{mb_name},#{mb_nickname},SYSDATE,0,
			SYSDATE,#{mb_yy},#{mb_mm},#{mb_dd},SYSDATE,'','')
	</insert>
	
	<!-- 이메일인증시  키값 저장 -->
	<update id="updatekey" parameterType="java.util.HashMap">
		update t1_member set mb_key=#{mb_key} where mb_email=#{mb_email}
	</update>
	
	
	<!-- 이메일 인증시 키값을 얻기 -->
	<select id="getKey" parameterType="String" resultType="String">
		select mb_key from t1_member where mb_email = #{mb_email}
	</select>
	
	<!-- 비밀번호 찾기 키값 저장 -->
	<update id="updatesetkey" parameterType="java.util.HashMap">
		update t1_member set setkey=#{setkey} where mb_id=#{mb_id}
	</update>
	
	<!-- 비밀번호 찾기 키값 얻기 -->
	<select id="getsetkey" parameterType="String" resultType="String">
		select setkey from t1_member where mb_id = #{mb_id}
	</select>
	
	<!-- 레벨 업데이트 (미인증0, 인증1, 탈퇴 -1, 차단-2, 최고관리자 99)--> 
	<update id="updatelev" parameterType="java.util.HashMap">
		update t1_member set mb_lev=#{mb_lev}<if test="mb_lev == -2">,mb_intercept_date=SYSDATE </if> where mb_id=#{mb_id}
	</update>
	
	<!-- 아이디 갯수 구하기 -->
	<select id="getOneId" parameterType="String" resultType="Integer">
		select count(*) from t1_member where mb_id=#{mb_id} 
	</select>
	
	<!-- 이메일 갯수 가져오기 -->
	<select id="getOneEmail" parameterType="String" resultType="Integer">
		select count(*) from t1_member where mb_email=#{mb_email} 
	</select>
	
	<!-- 닉네임 갯수 가져오기 -->
	<select id="getOneNickname" parameterType="String" resultType="Integer">
		select count(*) from t1_member where mb_nickname=#{mb_nickname} 
	</select>
	
	<!-- 레벨 가져오기 -->
	<select id="getLev" parameterType="String" resultType="Integer">
		select mb_lev from t1_member where mb_id=#{mb_id}
	</select>
	
	<!-- 비밀번호 일치 확인 -->
	<select id="passwordChek" parameterType="String" resultType="String">
		select mb_password from t1_member where mb_id=#{mb_id}
	</select>
	
	<!-- 회원정보 가져오기 -->
	<select id="selectById" parameterType="String" resultType="MemberVO">
		select * from t1_member where mb_id=#{mb_id}
	</select>
	
	<!-- 정보 수정 -->
	<update id="updateMember" parameterType="java.util.HashMap">
		update t1_member set
				mb_password=#{mb_password},mb_name=#{mb_name},mb_yy=#{mb_yy},mb_mm=#{mb_mm},mb_dd=#{mb_dd}
			where 
				mb_id=#{mb_id}
	</update>
	
	<!--  닉네임 수정 -->
	<update id="updateNickname" parameterType="java.util.HashMap">
		update t1_member set
				mb_nickname=#{mb_nickname},mb_nickupdate=SYSDATE
			where
				mb_id=#{mb_id}
	</update> 
	
	<!-- 닉네임 가져오기 -->
	<select id="selectByNickname" parameterType="String" resultType="String">
		select mb_nickname from t1_member where mb_id=#{mb_id}
	</select>
	
	<!-- 이름 가져오기 -->
	<select id="selectByName" parameterType="String" resultType="String">
		select mb_name from t1_member where mb_id=#{mb_id}
	</select>
	
	
	<!-- 아이디 찾기 -->
	<select id="findid" parameterType="java.util.HashMap" resultType="String">
		select mb_id from t1_member where mb_name=#{mb_name} and mb_email=#{mb_email}
	</select>
	
	<!-- 비밀번호 찾기 -->
	<select id="findpw" parameterType="java.util.HashMap" resultType="String">
		select mb_password from t1_member where mb_id=#{mb_id} and mb_email=#{mb_email}
	</select>	
	
	<!-- 비밀번호 가져오기  -->
	<select id="passwordCk" parameterType="String" resultType="String">
		select mb_password from t1_member where mb_password=#{mb_password}	
	</select>
	
	<!-- 비밀번호 변경 -->
	<update id="updatePW" parameterType="java.util.HashMap">
		update t1_member set
				mb_password=#{mb_password}
			where
				mb_id=#{mb_id} and setkey=#{setkey}
	</update>
	
	<!-- 비밀번호 바꾸기 -->
	<update id="updatePassword" parameterType="java.util.HashMap">
		update t1_member set
				mb_password=#{mb_password}
			where
				mb_id=#{mb_id}
	</update>
	
	<!-- 회원정보 전체 가져오기 -->
	<select id="selectMemberAll" resultType="MemberVO">
		select * from t1_member
	</select>
	
	<!-- 닉네임 변경 시간 가져오기 -->
	<select id="selectNikupdatetime" parameterType="HashMap" resultType="Date">
		select mb_nickupdate from t1_member where mb_id=#{mb_id}
	</select>
	
	<!-- 현재 시간 가져오기 -->
	
	<select id="sysdate" resultType="Date">
		select sysdate from dual
	</select>
	
	<!-- 휴먼유저 -->
	
</mapper>